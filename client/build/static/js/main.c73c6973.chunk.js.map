{"version":3,"sources":["App.js","ModalImage.js","serviceWorker.js","index.js"],"names":["App","React","Component","props","callBackendAPI","a","fetch","response","json","body","console","log","express","status","Error","message","state","location","lat","lng","zoom","index","markersData","fault","photos","currentPhoto","currentFault","layers","bounds","icon","getCustomIcon","show","modalPhoto","popover","photourl","amazon","data","size","this","getSize","L","iconUrl","iconSize","iconAnchor","catch","err","faults","i","length","gid","photo","photoid","push","position","JSON","parse","st_asgeojson","coordinates","latlng","latLng","setState","e","target","getZoom","getBounds","n","width","z","Array","join","slice","parseInt","newSuffix","pad","newPhoto","url","marker","options","renderModal","method","headers","stringify","latitude","longitude","menu","id","addMarkers","Popover","Image","className","src","onClick","clickImage","thumbnail","height","Navbar","bg","expand","Brand","href","Nav","NavDropdown","title","Item","loadLayer","Divider","Link","Map","ref","map","worldCopyJump","center","onZoom","TileLayer","attribution","Marker","key","draggable","clickMarker","Popup","Modal","Header","Title","Body","Footer","Button","clickPrev","variant","clickNext","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c73c6973.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport { Map, TileLayer, Marker, Popup}  from 'react-leaflet';\r\nimport {Navbar, Nav, NavDropdown, Modal, Button, Image, Popover, Overlay}  from 'react-bootstrap';\r\nimport L from 'leaflet';\r\nimport './App.css';\r\nimport ModalImage from \"./ModalImage\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      location: {\r\n        lat: -41.2728,\r\n        lng: 173.2995,\r\n      },\r\n\t  zoom: 8,\r\n\t  index: null,\r\n      markersData: [],\r\n      fault: [],\r\n      photos: [],\r\n      currentPhoto: null,\r\n      currentFault: null,\r\n      layers: [],\r\n      bounds: {},\r\n      icon: this.getCustomIcon(),\r\n      show: false,\r\n      modalPhoto: null,\r\n\t  popover: false,\r\n\t  photourl: null,\r\n\t  amazon: \"https:/taranaki.s3.ap-southeast-2.amazonaws.com/Roads/2019_11/\"\r\n    };\r\n    // showModal = e => {\r\n    //   this.setState({\r\n    //     show: true\r\n    //   });\r\n    // };\r\n  }\r\n\r\n  getCustomIcon(data, zoom) {\r\n    let icon = null;\r\n    //console.log(zoom);\r\n    const size = this.getSize(zoom);\r\n      if (data === \"Scabbing\") {\r\n        icon = L.icon({\r\n        iconUrl: 'CameraSpringGreen_16px.png',\r\n        iconSize: [size, size],\r\n        iconAnchor: [size / 2, size / 2],\r\n        });\r\n      } else if (data === \"Flushing\") {\r\n        icon = L.icon({\r\n        iconUrl: 'CameraDodgerBlue_16px.png',\r\n        iconSize: [size, size],\r\n        iconAnchor: [size / 2, size / 2],\r\n        });      \r\n      } else {\r\n        icon = L.icon({\r\n        iconUrl: 'CameraRed_16px.png',\r\n        iconSize: [size, size],\r\n        iconAnchor: [size / 2, size / 2],\r\n        });\r\n      }  \r\n      return icon\r\n  }\r\n\r\n  getSize(zoom) {\r\n    if (zoom < 10) {\r\n      return 4;\r\n    } else if (zoom >= 10 && zoom <= 16) {\r\n      return 8;\r\n    } else {\r\n      return 16;\r\n    }\r\n  }\r\n\r\n  // const CustomMarker = (RL as any).withLeaflet(class extends MapLayer<any> {\r\n  // });\r\n\r\n  componentDidMount() {\r\n    // Call our fetch function below once the component mounts\r\n    this.callBackendAPI()\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  componentDidUpdate() {   \r\n    //let marker = CustomMarker();\r\n  }\r\n\r\n  callBackendAPI = async () => {\r\n    const response = await fetch('http://localhost:5000/api') \r\n    const body = await response.json();\r\n    console.log(body.express)\r\n    if (response.status !== 200) {\r\n      throw Error(body.message) \r\n    }\r\n    return body;\r\n  };\r\n\r\n  async addMarkers(data) {\r\n    let markersData = [];\r\n    let faults = [];\r\n    let photos = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n      const gid = data[i].gid\r\n      const fault = data[i].fault\r\n      const photo = data[i].photoid\r\n      //console.log(data[i].photoid);\r\n      faults.push(fault);\r\n      photos.push(photo);\r\n      const position = JSON.parse(data[i].st_asgeojson);\r\n      const lng = position.coordinates[0];\r\n      const lat = position.coordinates[1];\r\n      let latlng = L.latLng(lat, lng);\r\n      markersData.push(latlng);     \r\n    }\r\n    this.setState({markersData: markersData});\r\n    this.setState({fault: faults});\r\n    this.setState({photos: photos});\r\n  }\r\n\r\n  //EVENTS\r\n  /**\r\n   * fires when user scrolls mousewheel\r\n   * param - e the mouse event\r\n   **/\r\n  onZoom(e) {\r\n    this.setState({zoom: e.target.getZoom()});\r\n    this.setState({bounds: e.target.getBounds()});\r\n    //const { markersData } = this.state.markersData;  \r\n    //console.log(e.target.getZoom())\r\n  }\r\n\r\n  clickImage(e) {\r\n    \r\n    this.setState({show: true});\r\n  }\r\n\r\n  pad(n, width, z) {\r\n\tz = z || '0';\r\n\tn = n + '';\r\n\treturn n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n  }\r\n\r\n  clickPrev(e) {\r\n\tlet photo = this.state.currentPhoto;\r\n\tlet suffix = photo.slice(photo.length - 5, photo.length);\r\n\tlet intSuffix = (parseInt(photo.slice(photo.length - 5, photo.length)));\r\n\tlet n = intSuffix - 1;\r\n\tlet newSuffix = this.pad(n, 5);\r\n\tlet prefix = photo.slice(0, photo.length - 5);\r\n\tlet newPhoto = prefix + newSuffix;\r\n\tthis.setState({currentPhoto: newPhoto});\r\n\tconst url = this.state.amazon + newPhoto + \".jpg\";\r\n\tthis.setState({photourl: url});\r\n\t\r\n\t}\r\n\r\n  clickNext(e) {\r\n\tlet photo = this.state.currentPhoto;\r\n\tlet suffix = photo.slice(photo.length - 5, photo.length);\r\n\tlet intSuffix = (parseInt(photo.slice(photo.length - 5, photo.length)));\r\n\tlet n = intSuffix + 1;\r\n\tlet newSuffix = this.pad(n, 5);\r\n\tlet prefix = photo.slice(0, photo.length - 5);\r\n\tlet newPhoto = prefix + newSuffix;\r\n\tthis.setState({currentPhoto: newPhoto});\r\n\tconst url = this.state.amazon + newPhoto + \".jpg\";\r\n\tthis.setState({photourl: url});\r\n  }\r\n\r\n  clickMarker(e) {\r\n    var marker = e.target;\r\n\tconst index = marker.options.index;\r\n\tthis.setState({index: index});\r\n\tconst data = marker.options.data\r\n\tconst photo = this.state.photos[index]\r\n\tconst url = this.state.amazon + photo + \".jpg\";\r\n\t//console.log(url);\r\n\tthis.setState({photourl: url});\r\n    this.setState({currentFault: this.state.fault[index]});\r\n    //console.log(index);\r\n    this.setState({popover: true});\r\n    this.setState({currentPhoto: this.state.photos[index]})\r\n    this.renderModal(this.state.photos[index]);\r\n  }\r\n\r\n  async loadLayer(e) {\r\n    const response = await fetch('http://localhost:5000/layer', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        latitude: this.state.location.lat,\r\n        longitude: this.state.location.lng,\r\n        menu: e.target.id\r\n      })\r\n    })\r\n    if (response.status !== 200) {\r\n      throw Error(body.message) \r\n    } \r\n    const body = await response.json();\r\n    await this.addMarkers(body);\r\n    \r\n  };\r\n\r\n  closeModal() {\r\n\tthis.setState({show: false});\r\n\tthis.setState({popover: false});\r\n  }\r\n\r\n  //RENDER\r\n\r\n  renderModal(photo) {\r\n    //this.setState({show: true});\r\n    //this.setState({modalPhoto: photo});\r\n    //this.render();\r\n\r\n  }\r\n\r\n  render() {\r\n    const position = [this.state.location.lat, this.state.location.lng];\r\n    const { markersData } = this.state.markersData;\r\n    const { fault } = this.state.fault;\r\n\tconst { photo } = this.state.photos;\r\n\t\r\n\tconst handleClose = () => this.setState({show: false});\r\n\r\n    const popover =(\r\n\t\t<Popover>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t{this.state.currentFault}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t<Image className=\"thumbnail\" src=\"CameraSpringGreen_16px.png\" photo={photo} onClick={(e) => this.clickImage(e)} thumbnail width=\"128\" height=\"128\"></Image >\r\n\t\t\t\t</div>          \r\n\t\t\t</div>\r\n  \t\t</Popover>\r\n\r\n    );\r\n    //const { currentFault } = this.state.currentFault;\r\n    //const { currentPhoto } = this.state.currentPhoto;\r\n   \r\n    return (\r\n      <>\r\n        <div>\r\n          <Navbar bg=\"light\" expand=\"lg\"> \r\n          <Navbar.Brand href=\"#home\">\r\n            </Navbar.Brand>\r\n          <Nav>\r\n            <NavDropdown title=\"Layers\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item id=\"AddLayer\" href=\"#addlayer\" onClick={(e) => this.loadLayer(e)}\r\n              >Add Layer\r\n              \r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown>         \r\n          </Nav>\r\n          <Nav className=\"ml-auto\">\r\n            <Nav.Link href=\"#login\">Login</Nav.Link>\r\n          </Nav>\r\n          </Navbar>\r\n        </div>\r\n        <div className=\"map\">\r\n        <Map\r\n          ref={(ref) => { this.map = ref; }}\r\n          className=\"map\"\r\n          markersData={markersData}\r\n          fault={fault}\r\n          photo={photo}\r\n          worldCopyJump={true}\r\n          center={position}\r\n          zoom={this.state.zoom}\r\n          onZoom={(e) => this.onZoom(e)}>\r\n          <TileLayer\r\n            attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors and Chat location by Iconika from the Noun Project\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n\t\t \r\n          {this.state.markersData.map((position, index) => \r\n          <Marker \r\n\t\t\tkey={`${index}`}\r\n\t\t\tindex={index}\r\n\t\t\tdata={fault}\r\n\t\t\tphoto={photo}\r\n\t\t\tposition={position} \r\n\t\t\ticon={this.getCustomIcon(this.state.fault[index], this.state.zoom)}\r\n\t\t\tdraggable={false} \r\n\t\t\tonClick={(e) => this.clickMarker(e)}\t\t\t\t  \r\n\t\t\t>\r\n\t\t\t<Popup className=\"popup\">\r\n\t\t\t<div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{this.state.currentFault}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div>\r\n\t\t\t\t<Image className=\"thumbnail\" src={this.state.photourl} photo={photo} onClick={(e) => this.clickImage(e)} thumbnail={true}></Image >\r\n\t\t\t\t</div>          \r\n\t\t\t</div>\r\n  \t\t\t</Popup>  \r\n\t\t</Marker>\r\n\t\t\r\n        )}\r\n        \r\n        </Map> \r\n      </div>\r\n      <Modal show={this.state.show} size={'xl'}>\r\n        <Modal.Header>\r\n          <Modal.Title>{this.state.currentFault}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body >\t\t\r\n\t\t<Image className=\"photo\" src={this.state.photourl} data={fault} onClick={(e) => this.clickImage(e)} thumbnail></Image >\t\t\r\n\t\t</Modal.Body>\r\n        <Modal.Footer>\r\n\t\t<Button className=\"prev\" onClick={(e) => this.clickPrev(e)}> \r\n            Previous\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n\t\t  <Button className=\"next\" variant=\"primary\" onClick={(e) => this.clickNext(e)}>\r\n            Next\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div className=\"footer\">\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport {Modal, Button}  from 'react-bootstrap';\r\nexport default class ModalImage extends React.Component {\r\n  \r\n    state = { show: false, modalPhoto: null };\r\n\r\n  handleShowDialog = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    const handleClose = () => this.setState({show: false});\r\n    return (\r\n        \r\n        <Modal show={this.state.show}>\r\n        <Modal.Header>\r\n          <Modal.Title>{this.state.modalPhoto}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body ></Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n//registerServiceWorker();\r\n"],"sourceRoot":""}